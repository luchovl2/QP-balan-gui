/*$file${.::balan.h} #######################################################*/
/*
* Model: model.qm
* File:  ${.::balan.h}
*
* This code has been generated by QM tool (https://state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*$endhead${.::balan.h} ####################################################*/
#ifndef balan_h
#define balan_h

enum BalanSignals
{
    ENCENDER_SIG = Q_USER_SIG,
    APAGAR_SIG,
    MAX_PUB_SIG,

    ENC_PWM_SIG,
    APA_PWM_SIG,
    CICLO_CON_SIG,
    MED_ADC_SIG,
    MED_CON_SIG,
    MAX_SIG
};

/* cantidad de celdas */
#define CANT_CELDAS		(4U)			//cantidad de celdas

#if (CANT_CELDAS < 2U)
#error	Cantidad de celdas baja.
#endif

#define CANT_SALIDAS	(CANT_CELDAS - (1U))	//cantidad de pares de transistores
													//se usa el módulo de trifásica del micro

#if (CANT_SALIDAS > 3)
#error Cantidad de salidas excedida.
#endif

#define DELTA_V_MIN_mV		(10U)			//diferencia de tensión mínima, en mV, que se corrige

#define CELDA_V_MAX_DEBIL_mV	(4200U)	//tensión máxima de celda en mV; impide que se le agregue carga al balancear
#define CELDA_V_MIN_DEBIL_mV	(3200U)	//tensión mínima de celda en mV; impide que se le quite carga al balancear

#define CELDA_V_MAX_FUERTE_mV	(4300U)	//tensión máxima de celda en mV; impide que se balancee la celda
#define CELDA_V_MIN_FUERTE_mV	(3100U)	//tensión mínima de celda en mV; impide que se balancee la celda

#define CONTROL_TIEMPO    (QTimeEvtCtr)(BSP_CONV_MS_2_TICKS(1000U))

/*${Events::MedicionEvt} ...................................................*/
typedef struct {
/* protected: */
    QEvt super;

/* public: */
    uint8_t celda;
    uint16_t valor;
} MedicionEvt;

/*${Events::VceldasEvt} ....................................................*/
typedef struct {
/* protected: */
    QEvt super;

/* public: */
    uint16_t v_celdas[CANT_CELDAS];
} VceldasEvt;

/*${AOs::Medicion_ctor} ....................................................*/
void Medicion_ctor(void);

extern QActive * const AO_Medicion;

/*${AOs::Control_ctor} .....................................................*/
void Control_ctor(void);

extern QActive * const AO_Control;

#endif /* balan_h */
